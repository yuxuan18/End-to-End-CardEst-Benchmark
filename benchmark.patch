diff -ruN postgresql-13.1_11/src/backend/optimizer/path/costsize.c postgresql-13.1_12/src/backend/optimizer/path/costsize.c
--- postgresql-13.1_11/src/backend/optimizer/path/costsize.c	2020-11-09 22:24:30.000000000 +0000
+++ postgresql-13.1_12/src/backend/optimizer/path/costsize.c	2021-09-16 11:41:31.480786000 +0000
@@ -97,9 +97,29 @@
 #include "utils/spccache.h"
 #include "utils/tuplesort.h"
 
+#include "nodes/print.h"
+#include <unistd.h>
+#include <time.h>
+#include <stdlib.h>
+
 
 #define LOG2(x)  (log(x) / 0.693147180559945)
 
+/** modified  */
+#define CARD_EST_QUERY_NUM 10000
+static double card_ests[CARD_EST_QUERY_NUM] = {0.0};
+static double join_card_ests[CARD_EST_QUERY_NUM] = {0.0};
+int         query_no = 0;
+int         join_est_no = 0;
+bool        ml_cardest_enabled = false;
+bool        ml_joinest_enabled = false;
+bool        debug_card_est = false;
+bool        print_sub_queries = false;
+bool        print_single_tbl_queries = false;
+char        *ml_cardest_fname = NULL;
+char        *ml_joinest_fname = NULL;
+/** =====modified  */
+
 /*
  * Append and MergeAppend nodes are less expensive than some other operations
  * which use cpu_tuple_cost; instead of adding a separate GUC, estimate the
@@ -179,6 +199,266 @@
 static double relation_byte_size(double tuples, int width);
 static double page_size(double tuples, int width);
 static double get_parallel_divisor(Path *path);
+/** modified  */
+static void print_est_card(const char* func_name, double card);
+static void print_query_no(const char* func_name);
+static void read_from_fspn_estimate(const char* filename);
+static void read_from_fspn_join_estimate(const char* filename);
+static void fprint_expr(FILE* fp, const Node *expr, const List *rtable);
+
+
+static void
+print_relids(FILE* fp, PlannerInfo *root, Relids relids)
+{
+    int			x;
+    bool		first = true;
+
+    x = -1;
+    while ((x = bms_next_member(relids, x)) >= 0)
+    {
+        if (!first)
+            fprintf(fp, " ");
+        if (x < root->simple_rel_array_size &&
+            root->simple_rte_array[x])
+            fprintf(fp, "%s", root->simple_rte_array[x]->eref->aliasname);
+        else
+            fprintf(fp, "%d", x);
+        first = false;
+    }
+}
+
+static void
+print_restrictclauses(FILE* fp, PlannerInfo *root, List *clauses)
+{
+    ListCell   *l;
+
+    foreach(l, clauses)
+    {
+        RestrictInfo *c = lfirst(l);
+
+        fprint_expr(fp, (Node *) c->clause, root->parse->rtable);
+        if (lnext(clauses, l))
+            fprintf(fp, ", ");
+    }
+}
+
+static void
+fprint_expr(FILE* fp, const Node *expr, const List *rtable)
+{
+    if (expr == NULL)
+    {
+        fprintf(fp,"<>");
+        return;
+    }
+
+    if (IsA(expr, Var))
+    {
+        const Var  *var = (const Var *) expr;
+        char	   *relname,
+                *attname;
+
+        switch (var->varno)
+        {
+            case INNER_VAR:
+                relname = "INNER";
+                attname = "?";
+                break;
+            case OUTER_VAR:
+                relname = "OUTER";
+                attname = "?";
+                break;
+            case INDEX_VAR:
+                relname = "INDEX";
+                attname = "?";
+                break;
+            default:
+            {
+                RangeTblEntry *rte;
+
+                Assert(var->varno > 0 &&
+                       (int) var->varno <= list_length(rtable));
+                rte = rt_fetch(var->varno, rtable);
+                relname = rte->eref->aliasname;
+                attname = get_rte_attribute_name(rte, var->varattno);
+            }
+                break;
+        }
+        fprintf(fp,"%s.%s", relname, attname);
+    }
+    else if (IsA(expr, Const))
+    {
+        const Const *c = (const Const *) expr;
+        Oid			typoutput;
+        bool		typIsVarlena;
+        char	   *outputstr;
+
+        if (c->constisnull)
+        {
+            fprintf(fp,"NULL");
+            return;
+        }
+
+        getTypeOutputInfo(c->consttype,
+                          &typoutput, &typIsVarlena);
+
+        outputstr = OidOutputFunctionCall(typoutput, c->constvalue);
+        fprintf(fp,"%s", outputstr);
+        pfree(outputstr);
+    }
+    else if (IsA(expr, OpExpr))
+    {
+        const OpExpr *e = (const OpExpr *) expr;
+        char	   *opname;
+
+        opname = get_opname(e->opno);
+        if (list_length(e->args) > 1)
+        {
+            fprint_expr(fp, get_leftop((const Expr *) e), rtable);
+            fprintf(fp," %s ", ((opname != NULL) ? opname : "(invalid operator)"));
+            fprint_expr(fp, get_rightop((const Expr *) e), rtable);
+        }
+        else
+        {
+            /* we print prefix and postfix ops the same... */
+            fprintf(fp,"%s ", ((opname != NULL) ? opname : "(invalid operator)"));
+            fprint_expr(fp, get_leftop((const Expr *) e), rtable);
+        }
+    }
+    else if (IsA(expr, FuncExpr))
+    {
+        const FuncExpr *e = (const FuncExpr *) expr;
+        char	   *funcname;
+        ListCell   *l;
+
+        funcname = get_func_name(e->funcid);
+        fprintf(fp,"%s(", ((funcname != NULL) ? funcname : "(invalid function)"));
+        foreach(l, e->args)
+        {
+            fprint_expr(fp, lfirst(l), rtable);
+            if (lnext(e->args, l))
+                fprintf(fp,",");
+        }
+        fprintf(fp,")");
+    }
+    else
+        fprintf(fp,"unknown expr");
+}
+
+static void
+print_basic_rel(FILE* fp, PlannerInfo *root, RelOptInfo *rel){
+    fprintf(fp, "RELOPTINFO (");
+    print_relids(fp, root, rel->relids);
+    fprintf(fp, "): rows=%.0f width=%d\n", rel->rows, rel->reltarget->width);
+
+    if (rel->baserestrictinfo)
+    {
+        fprintf(fp, "\tbaserestrictinfo: ");
+        print_restrictclauses(fp, root, rel->baserestrictinfo);
+        fprintf(fp, "\n");
+    }
+
+}
+
+static void
+print_single_rel(PlannerInfo *root, RelOptInfo *rel) {
+    FILE* f_rec= fopen("single_tbl_est_record.txt", "a+");
+
+    fprintf(f_rec, "query: %d\n", query_no++);
+    print_basic_rel(f_rec, root, rel);
+    fprintf(f_rec, "\n\n");
+    fclose(f_rec);
+}
+
+static void
+print_join_rel(PlannerInfo *root, RelOptInfo *rel1, RelOptInfo *rel2){
+    FILE* f_rec= fopen("join_est_record_job.txt", "a+");
+
+    fprintf(f_rec, "query: %d\n", query_no++);
+    fprintf(f_rec, "==================inner_rel==================: \n");
+    print_basic_rel(f_rec, root, rel1);
+    fprintf(f_rec, "==================outer_rel==================: \n");
+    print_basic_rel(f_rec, root, rel2);
+
+    fprintf(f_rec, "\n\n");
+
+    fclose(f_rec);
+}
+
+static void
+print_query_no(const char* func_name)
+{
+    FILE *file = fopen("costsize.log", "a+");
+
+    time_t rawtime;
+    struct tm * timeinfo;
+    char time_buffer [128];
+
+    time (&rawtime);
+    timeinfo = localtime (&rawtime);
+    strftime (time_buffer,sizeof(time_buffer),"%Y/%m/%d %H:%M:%S",timeinfo);
+
+    fprintf(file, "%s: pid[%d] in [%s]: query num: %d\n", time_buffer, getpid(), func_name, query_no);
+    fclose(file);
+}
+
+static void
+print_est_card(const char* func_name, double card_est)
+{
+    FILE *file = fopen("costsize.log", "a+");
+
+    time_t rawtime;
+    struct tm * timeinfo;
+    char time_buffer [128];
+
+    time (&rawtime);
+    timeinfo = localtime (&rawtime);
+    strftime (time_buffer,sizeof(time_buffer),"%Y/%m/%d %H:%M:%S",timeinfo);
+
+    fprintf(file, "%s: pid[%d] in [%s]: %0.9f\n", time_buffer, getpid(), func_name, card_est);
+    fclose(file);
+}
+
+static void
+read_from_fspn_estimate(const char* filename)
+{
+    FILE* fp = fopen(filename, "r");
+    double card_est;
+    int query_cnt = 0;
+
+    while (fscanf(fp, "%lf", &card_est) == 1){
+        card_ests[query_cnt] = card_est;
+        query_cnt += 1;
+    }
+
+    fclose(fp);
+}
+
+static void
+read_from_fspn_join_estimate(const char* filename){
+//    FILE* fp = fopen("fspn_job_light_join_est_fkfk_with_psql.txt", "r");
+    FILE* fp = fopen(filename, "r");
+
+    double card_est;
+    int cnt = 0;
+
+    while (fscanf(fp, "%lf", &card_est) == 1){
+        join_card_ests[cnt] = card_est;
+        cnt += 1;
+    }
+
+    fclose(fp);
+}
+
+int
+StringCompare( const void* a, const void* b)
+{
+    char const **char_a = a;
+    char const **char_b = b;
+
+    return strcmp(*char_a, *char_b);
+}
+
+/** =====modified  */
 
 
 /*
@@ -549,6 +829,10 @@
 				   &indexSelectivity, &indexCorrelation,
 				   &index_pages);
 
+//    if (ml_cardest_enabled) {
+//        print_est_card(__FUNCTION__, indexSelectivity);
+//    }
+
 	/*
 	 * Save amcostestimate's results for possible use in bitmap scan planning.
 	 * We don't bother to save indexStartupCost or indexCorrelation, because a
@@ -4654,8 +4938,31 @@
 							   JOIN_INNER,
 							   NULL);
 
+	if(ml_cardest_enabled){
+//        print_query_no(__FUNCTION__);
+        if (query_no == 0) {
+            read_from_fspn_estimate(ml_cardest_fname);
+        }
+
+        double new_nrows = card_ests[query_no];
+
+        if (debug_card_est) {
+            FILE *ffp = fopen("old_new_single_est.txt", "w");
+            fprintf(ffp, "%.5f:%.5f\n", nrows, new_nrows);
+            fclose(ffp);
+        }
+
+        nrows = new_nrows;
+//        print_est_card(__FUNCTION__, rel->rows);
+        query_no++;
+	}
+
 	rel->rows = clamp_row_est(nrows);
 
+	if(print_single_tbl_queries){
+        print_single_rel(root, rel);
+	}
+
 	cost_qual_eval(&rel->baserestrictcost, rel->baserestrictinfo, root);
 
 	set_rel_width(root, rel);
@@ -4733,6 +5040,9 @@
 										   inner_rel->rows,
 										   sjinfo,
 										   restrictlist);
+
+//    debug_print_rel(root, rel);
+//    print_est_card(__FUNCTION__, rel->rows);
 }
 
 /*
@@ -4776,6 +5086,7 @@
 									   inner_path->rows,
 									   sjinfo,
 									   restrict_clauses);
+//    print_est_card(__FUNCTION__, nrows);
 	/* For safety, make sure result is not more than the base estimate */
 	if (nrows > rel->rows)
 		nrows = rel->rows;
@@ -4925,6 +5236,29 @@
 			break;
 	}
 
+/*  print for sub-queries*/
+    if (print_sub_queries){
+	    print_join_rel(root, inner_rel, outer_rel);
+    }
+
+    if (ml_joinest_enabled) {
+
+        if (join_est_no == 0) {
+            read_from_fspn_join_estimate(ml_joinest_fname);
+        }
+        double join_est = join_card_ests[join_est_no];
+//        printf("Read Join Est from File: %d join_est: %f\n", join_est_no, join_est);
+
+        if (debug_card_est) {
+            FILE *ffp = fopen("old_new_join_est.txt", "a+");
+            fprintf(ffp, "%.5f:%.5f\n", nrows, join_est);
+            fclose(ffp);
+        }
+
+        join_est_no++;
+        if (join_est > 0) {
+            return clamp_row_est(join_est);
+        }
+    }
+
 	return clamp_row_est(nrows);
 }
 
diff -ruN postgresql-13.1_11/src/backend/postmaster/postmaster.c postgresql-13.1_12/src/backend/postmaster/postmaster.c
--- postgresql-13.1_11/src/backend/postmaster/postmaster.c	2020-11-09 22:24:30.000000000 +0000
+++ postgresql-13.1_12/src/backend/postmaster/postmaster.c	2021-09-16 15:22:04.707139000 +0000
@@ -578,6 +578,8 @@
 void
 PostmasterMain(int argc, char *argv[])
 {
+    ereport(LOG, (errmsg_internal("%s:", "Benchmark Start..."), errdetail_internal("%s", "Postgres Main")));
+
 	int			opt;
 	int			status;
 	char	   *userDoption = NULL;
diff -ruN postgresql-13.1_11/src/backend/utils/misc/guc.c postgresql-13.1_12/src/backend/utils/misc/guc.c
--- postgresql-13.1_11/src/backend/utils/misc/guc.c	2020-11-09 22:24:30.000000000 +0000
+++ postgresql-13.1_12/src/backend/utils/misc/guc.c	2021-09-16 11:42:02.739339000 +0000
@@ -2040,6 +2040,57 @@
 		NULL, NULL, NULL
 	},
 
+    {
+            {"ml_cardest_enabled", PGC_USERSET, UNGROUPED,
+             gettext_noop("Enable ML-based Cardinality Estimation."),
+             NULL
+            },
+            &ml_cardest_enabled,
+            false,
+            NULL, NULL, NULL
+    },
+
+    {
+            {"ml_joinest_enabled", PGC_USERSET, UNGROUPED,
+             gettext_noop("Enable ML-based Cardinality Estimation."),
+             NULL
+            },
+            &ml_joinest_enabled,
+            false,
+            NULL, NULL, NULL
+    },
+
+    {
+            {"debug_card_est", PGC_USERSET, UNGROUPED,
+             gettext_noop("Enable cardinality estimation debug."),
+             NULL
+            },
+            &debug_card_est,
+            false,
+            NULL, NULL, NULL
+    },
+
+    {
+            {"print_single_tbl_queries", PGC_USERSET, UNGROUPED,
+             gettext_noop("Enable single-table queries printing."),
+             NULL
+            },
+            &print_single_tbl_queries,
+            false,
+            NULL, NULL, NULL
+
+    },
+
+    {
+            {"print_sub_queries", PGC_USERSET, UNGROUPED,
+             gettext_noop("Enable sub-queries printing."),
+             NULL
+            },
+            &print_sub_queries,
+            false,
+            NULL, NULL, NULL
+    },
+
 	/* End-of-list marker */
 	{
 		{NULL, 0, 0, NULL, NULL}, NULL, false, NULL, NULL, NULL
@@ -3381,6 +3432,26 @@
 		NULL, assign_tcp_user_timeout, show_tcp_user_timeout
 	},
 
+    {
+            {"query_no", PGC_USERSET, UNGROUPED,
+             gettext_noop("Sets the query number of cardinality estimation."),
+             NULL
+            },
+            &query_no,
+            0, 0, INT_MAX,
+            NULL, NULL, NULL
+    },
+
+    {
+            {"join_est_no", PGC_USERSET, UNGROUPED,
+             gettext_noop("Sets the query number of cardinality estimation."),
+             NULL
+            },
+            &join_est_no,
+            0, 0, INT_MAX,
+            NULL, NULL, NULL
+    },
+
 	/* End-of-list marker */
 	{
 		{NULL, 0, 0, NULL, NULL}, NULL, 0, 0, 0, NULL, NULL, NULL
@@ -4430,6 +4501,28 @@
 		check_backtrace_functions, assign_backtrace_functions, NULL
 	},
 
+    {
+            {"ml_cardest_fname", PGC_USERSET, UNGROUPED,
+                    gettext_noop("Sets the file name of ML-based cardnality estimation."),
+                    NULL,
+                    GUC_IS_NAME
+            },
+            &ml_cardest_fname,
+            "",
+            check_cluster_name, NULL, NULL
+    },
+
+    {
+            {"ml_joinest_fname", PGC_USERSET, UNGROUPED,
+                    gettext_noop("Sets the file name of ML-based join size estimation."),
+                    NULL,
+                    GUC_IS_NAME
+            },
+            &ml_joinest_fname,
+            "",
+            check_cluster_name, NULL, NULL
+    },
+
 	/* End-of-list marker */
 	{
 		{NULL, 0, 0, NULL, NULL}, NULL, NULL, NULL, NULL, NULL
diff -ruN postgresql-13.1_11/src/include/optimizer/cost.h postgresql-13.1_12/src/include/optimizer/cost.h
--- postgresql-13.1_11/src/include/optimizer/cost.h	2020-11-09 22:24:30.000000000 +0000
+++ postgresql-13.1_12/src/include/optimizer/cost.h	2021-09-16 11:42:22.632646000 +0000
@@ -67,6 +67,18 @@
 extern PGDLLIMPORT bool enable_partition_pruning;
 extern PGDLLIMPORT int constraint_exclusion;
 
+extern int  query_no;
+extern int  join_est_no;
+extern bool ml_cardest_enabled;
+extern bool ml_joinest_enabled;
+extern bool debug_card_est;
+extern bool print_sub_queries;
+extern bool print_single_tbl_queries;
+extern char *ml_cardest_fname;
+extern char *ml_joinest_fname;
+
+extern void debug_print_rel(PlannerInfo *root, RelOptInfo *rel);
+
 extern double index_pages_fetched(double tuples_fetched, BlockNumber pages,
 								  double index_pages, PlannerInfo *root);
 extern void cost_seqscan(Path *path, PlannerInfo *root, RelOptInfo *baserel,
